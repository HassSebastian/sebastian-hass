{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ServiceService {\n  /**\r\n   * Sets the value of the menu state.\r\n   *\r\n   * @param {boolean} value - The new value for the menu state.\r\n   *\r\n   */\n  setValue(value) {\n    this.showMenu.next(value);\n  }\n  /**\r\n   * Retrieves the current value of the menu state.\r\n   *\r\n   * @returns {boolean} - The current value of the menu state.\r\n   *\r\n   */\n  getValue() {\n    return this.showMenu.getValue();\n  }\n  /**\r\n   * Scrolls to the specified element with smooth behavior and hides the menu.\r\n   *\r\n   * @param {string} elementId - The ID of the element to scroll to.\r\n   *\r\n   */\n  scrollTo(elementId) {\n    const element = document.getElementById(elementId);\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth'\n      });\n      this.showMenu.next(false);\n    }\n  }\n  isTouchDevice() {\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || window.matchMedia('(pointer: coarse)').matches;\n  }\n  constructor() {\n    this.touchDisplay = false;\n    this.showMenu = new BehaviorSubject(false);\n    this.value$ = this.showMenu.asObservable();\n  }\n}\nServiceService.ɵfac = function ServiceService_Factory(t) {\n  return new (t || ServiceService)();\n};\nServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServiceService,\n  factory: ServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AAKlD,OAAM,MAAOC,cAAc;EAUzB;;;;;;EAMAC,QAAQ,CAACC,KAAc;IACrB,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,KAAK,CAAC;EAC3B;EAEA;;;;;;EAMAG,QAAQ;IACN,OAAO,IAAI,CAACF,QAAQ,CAACE,QAAQ,EAAE;EACjC;EAEA;;;;;;EAMAC,QAAQ,CAACC,SAAiB;IACxB,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAc,CAACH,SAAS,CAAC;IAClD,IAAIC,OAAO,EAAE;MACXA,OAAO,CAACG,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAQ,CAAE,CAAC;MAC9C,IAAI,CAACT,QAAQ,CAACC,IAAI,CAAC,KAAK,CAAC;;EAE7B;EAEAS,aAAa;IACX,OACE,cAAc,IAAIC,MAAM,IACxBC,SAAS,CAACC,cAAc,GAAG,CAAC,IAC5BF,MAAM,CAACG,UAAU,CAAC,mBAAmB,CAAC,CAACC,OAAO;EAElD;EAEAC;IAlDA,iBAAY,GAAS,KAAK;IAElB,aAAQ,GAA6B,IAAIpB,eAAe,CAC9D,KAAK,CACN;IAEM,WAAM,GAAwB,IAAI,CAACI,QAAQ,CAACiB,YAAY,EAAE;EA4ClD;;AApDJpB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAqB,SAAdrB,cAAc;EAAAsB,YAFb;AAAM","names":["BehaviorSubject","ServiceService","setValue","value","showMenu","next","getValue","scrollTo","elementId","element","document","getElementById","scrollIntoView","behavior","isTouchDevice","window","navigator","maxTouchPoints","matchMedia","matches","constructor","asObservable","factory","providedIn"],"sourceRoot":"","sources":["D:\\mySite\\src\\app\\service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ServiceService {\r\n\r\n  touchDisplay:boolean=false\r\n\r\n  private showMenu: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(\r\n    false\r\n  );\r\n\r\n  public value$: Observable<boolean> = this.showMenu.asObservable();\r\n\r\n  /**\r\n   * Sets the value of the menu state.\r\n   *\r\n   * @param {boolean} value - The new value for the menu state.\r\n   *\r\n   */\r\n  setValue(value: boolean): void {\r\n    this.showMenu.next(value);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the current value of the menu state.\r\n   *\r\n   * @returns {boolean} - The current value of the menu state.\r\n   *\r\n   */\r\n  getValue(): boolean {\r\n    return this.showMenu.getValue();\r\n  }\r\n\r\n  /**\r\n   * Scrolls to the specified element with smooth behavior and hides the menu.\r\n   *\r\n   * @param {string} elementId - The ID of the element to scroll to.\r\n   *\r\n   */\r\n  scrollTo(elementId: string): void {\r\n    const element = document.getElementById(elementId);\r\n    if (element) {\r\n      element.scrollIntoView({ behavior: 'smooth' });\r\n      this.showMenu.next(false);\r\n    }\r\n  }\r\n\r\n  isTouchDevice(): boolean {\r\n    return (\r\n      'ontouchstart' in window ||\r\n      navigator.maxTouchPoints > 0 ||\r\n      window.matchMedia('(pointer: coarse)').matches\r\n    );\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}