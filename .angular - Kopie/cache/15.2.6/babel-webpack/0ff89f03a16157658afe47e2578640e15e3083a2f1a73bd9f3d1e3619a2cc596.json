{"ast":null,"code":"\"use strict\";\n\n// import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\n// @Component({\n//   selector: 'app-footer-message-area',\n//   templateUrl: './footer-message-area.component.html',\n//   styleUrls: ['./footer-message-area.component.scss'],\n// })\n// export class FooterMessageAreaComponent implements OnInit {\n//   nameTest = /^[a-zA-Zäöüß]{1,50}\\s[a-zA-Zäöüß]{1,50}$/;\n//   emailTest = /\\S+@\\S+\\.\\S+/;\n//   messageTest = /^[a-zA-Z0-9\\s.,:;!?äÄöÖüÜß]+$/;\n//   sendMessage: string = 'Message sending';\n//   messageChanged: boolean = false;\n//   @ViewChild('nameField') nameField!: ElementRef;\n//   @ViewChild('emailField') emailField!: ElementRef;\n//   @ViewChild('messageField') messageField!: ElementRef;\n//   nameRequired: string = 'First and last name please';\n//   emailRequired: string = 'Your email is required';\n//   messageRequired: string = 'Your message is required';\n//   booleanNameRequired: number = 0;\n//   booleanEmailRequired: number = 0;\n//   booleanMessageRequired: number = 0;\n//   ngOnInit(): void {}\n//   /**\n//    * Handles the key press event for the input.\n//    *\n//    * @param {any} event - The key press event object.\n//    * @param {string} inputType - The type of input ('name', 'email', or 'message').\n//    *\n//    */\n//   handleKeyPress(event: any, inputType: string) {\n//     const inputValue = event.target.value;\n//     let booleanRequired: number;\n//     switch (inputType) {\n//       case 'name':\n//         booleanRequired = this.nameTest.test(inputValue) ? 1 : 2;\n//         this.booleanNameRequired = booleanRequired;\n//         break;\n//       case 'email':\n//         booleanRequired = this.emailTest.test(inputValue) ? 1 : 2;\n//         this.booleanEmailRequired = booleanRequired;\n//         break;\n//       case 'message':\n//         booleanRequired = this.messageTest.test(inputValue) ? 1 : 2;\n//         this.booleanMessageRequired = booleanRequired;\n//         break;\n//       default:\n//         break;\n//     }\n//   }\n//   /**\n//    * Checks the value of the email message and performs corresponding actions.\n//    *\n//    */\n//   checkValueMail() {\n//     let nameField = this.nameField.nativeElement;\n//     let emailField = this.emailField.nativeElement;\n//     let messageField = this.messageField.nativeElement;\n//     this.messageValueChanged()\n//       ? this.messageValueChangedOK(nameField, emailField, messageField)\n//       : this.messageValueChangedNotOK();\n//   }\n//   /**\n//    * Checks if the values of name, email, and message fields have valid values.\n//    *\n//    * @returns {boolean} - True if all fields have valid values, false otherwise.\n//    *\n//    */\n//   messageValueChanged() {\n//     return (\n//       this.booleanNameRequired == 1 &&\n//       this.booleanEmailRequired == 1 &&\n//       this.booleanMessageRequired == 1\n//     );\n//   }\n//   /**\n//    * Performs actions when the message value has changed and all fields have valid values.\n//    *\n//    * @param {any} nameField - The name field element.\n//    * @param {any} emailField - The email field element.\n//    * @param {any} messageField - The message field element.\n//    *\n//    */\n//   messageValueChangedOK(nameField: any, emailField: any, messageField: any) {\n//     this.messageChanged = true;\n//     setTimeout(() => {\n//       this.sendMail(nameField, emailField, messageField);\n//     }, 3000);\n//   }\n//   /**\n//    * Performs actions when the message value has changed but one or more fields have invalid values.\n//    *\n//    */\n//   messageValueChangedNotOK() {\n//     if (this.booleanNameRequired == 0) this.booleanNameRequired = 2;\n//     if (this.booleanEmailRequired == 0) this.booleanEmailRequired = 2;\n//     if (this.booleanMessageRequired == 0) this.booleanMessageRequired = 2;\n//   }\n//   /**\n//    * Sends the mail with the provided name, email, and message values.\n//    *\n//    * @param {HTMLInputElement} nameField - The name field input element.\n//    * @param {HTMLInputElement} emailField - The email field input element.\n//    * @param {HTMLInputElement} messageField - The message field input element.\n//    *\n//    */\n//   sendMail(\n//     nameField: HTMLInputElement,\n//     emailField: HTMLInputElement,\n//     messageField: HTMLInputElement\n//   ) {\n//     let fd = new FormData();\n//     fd.append('name', nameField.value);\n//     fd.append('email', emailField.value);\n//     fd.append('message', messageField.value);\n//     this.tryFunction(nameField, emailField, messageField, fd);\n//   }\n//   /**\n//    * Tries to send the mail with the provided name, email, message, and form data values.\n//    *\n//    * @param {any} nameField - The name field element.\n//    * @param {any} emailField - The email field element.\n//    * @param {any} messageField - The message field element.\n//    * @param {any} fd - The form data object.\n//    *\n//    */\n//   async tryFunction(\n//     nameField: any,\n//     emailField: any,\n//     messageField: any,\n//     fd: any\n//   ) {\n//     try {\n//       const response = await fetch(\n//         'https://sebastian-hass.de/assets/email-send/send_mail.php',\n//         {\n//           method: 'POST',\n//           body: fd,\n//         }\n//       );\n//       if (response.ok) {\n//         this.emailSendinOK(nameField, emailField, messageField);\n//       } else {\n//         this.sendMessage = 'ERROR when sending!';\n//       }\n//     } catch (error) {\n//       this.sendMessage = 'ERROR. Try again later!';\n//     }\n//   }\n//   /**\n//    * Performs actions when the email has been successfully sent.\n//    *\n//    * @param {any} nameField - The name field element.\n//    * @param {any} emailField - The email field element.\n//    * @param {any} messageField - The message field element.\n//    *\n//    */\n//   emailSendinOK(nameField: any, emailField: any, messageField: any) {\n//     this.sendMessage = 'Thanks for message';\n//     setTimeout(() => {\n//       this.messageChanged = false;\n//       this.sendMessage = 'Message sending';\n//       nameField.value = '';\n//       emailField.value = '';\n//       messageField.value = '';\n//       this.booleanNameRequired = 0;\n//       this.booleanEmailRequired = 0;\n//       this.booleanMessageRequired = 0;\n//     }, 3000);\n//   }\n// }","map":{"version":3,"mappingsnames":[],"sourceRoot":"","sources":["D:\\mySite\\src\\app\\footer\\footer-message-area\\footer-message-area.component.ts"],"sourcesContent":["// import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\n\r\n// @Component({\r\n//   selector: 'app-footer-message-area',\r\n//   templateUrl: './footer-message-area.component.html',\r\n//   styleUrls: ['./footer-message-area.component.scss'],\r\n// })\r\n\r\n// export class FooterMessageAreaComponent implements OnInit {\r\n//   nameTest = /^[a-zA-Zäöüß]{1,50}\\s[a-zA-Zäöüß]{1,50}$/;\r\n//   emailTest = /\\S+@\\S+\\.\\S+/;\r\n//   messageTest = /^[a-zA-Z0-9\\s.,:;!?äÄöÖüÜß]+$/;\r\n\r\n//   sendMessage: string = 'Message sending';\r\n//   messageChanged: boolean = false;\r\n\r\n//   @ViewChild('nameField') nameField!: ElementRef;\r\n//   @ViewChild('emailField') emailField!: ElementRef;\r\n//   @ViewChild('messageField') messageField!: ElementRef;\r\n\r\n//   nameRequired: string = 'First and last name please';\r\n//   emailRequired: string = 'Your email is required';\r\n//   messageRequired: string = 'Your message is required';\r\n\r\n//   booleanNameRequired: number = 0;\r\n//   booleanEmailRequired: number = 0;\r\n//   booleanMessageRequired: number = 0;\r\n\r\n//   ngOnInit(): void {}\r\n\r\n\r\n//   /**\r\n//    * Handles the key press event for the input.\r\n//    *\r\n//    * @param {any} event - The key press event object.\r\n//    * @param {string} inputType - The type of input ('name', 'email', or 'message').\r\n//    *\r\n//    */\r\n//   handleKeyPress(event: any, inputType: string) {\r\n//     const inputValue = event.target.value;\r\n//     let booleanRequired: number;\r\n//     switch (inputType) {\r\n//       case 'name':\r\n//         booleanRequired = this.nameTest.test(inputValue) ? 1 : 2;\r\n//         this.booleanNameRequired = booleanRequired;\r\n//         break;\r\n//       case 'email':\r\n//         booleanRequired = this.emailTest.test(inputValue) ? 1 : 2;\r\n//         this.booleanEmailRequired = booleanRequired;\r\n//         break;\r\n//       case 'message':\r\n//         booleanRequired = this.messageTest.test(inputValue) ? 1 : 2;\r\n//         this.booleanMessageRequired = booleanRequired;\r\n//         break;\r\n//       default:\r\n//         break;\r\n//     }\r\n//   }\r\n\r\n\r\n//   /**\r\n//    * Checks the value of the email message and performs corresponding actions.\r\n//    *\r\n//    */\r\n//   checkValueMail() {\r\n//     let nameField = this.nameField.nativeElement;\r\n//     let emailField = this.emailField.nativeElement;\r\n//     let messageField = this.messageField.nativeElement;\r\n//     this.messageValueChanged()\r\n//       ? this.messageValueChangedOK(nameField, emailField, messageField)\r\n//       : this.messageValueChangedNotOK();\r\n//   }\r\n\r\n\r\n//   /**\r\n//    * Checks if the values of name, email, and message fields have valid values.\r\n//    *\r\n//    * @returns {boolean} - True if all fields have valid values, false otherwise.\r\n//    *\r\n//    */\r\n//   messageValueChanged() {\r\n//     return (\r\n//       this.booleanNameRequired == 1 &&\r\n//       this.booleanEmailRequired == 1 &&\r\n//       this.booleanMessageRequired == 1\r\n//     );\r\n//   }\r\n\r\n\r\n//   /**\r\n//    * Performs actions when the message value has changed and all fields have valid values.\r\n//    *\r\n//    * @param {any} nameField - The name field element.\r\n//    * @param {any} emailField - The email field element.\r\n//    * @param {any} messageField - The message field element.\r\n//    *\r\n//    */\r\n//   messageValueChangedOK(nameField: any, emailField: any, messageField: any) {\r\n//     this.messageChanged = true;\r\n//     setTimeout(() => {\r\n//       this.sendMail(nameField, emailField, messageField);\r\n//     }, 3000);\r\n//   }\r\n\r\n\r\n//   /**\r\n//    * Performs actions when the message value has changed but one or more fields have invalid values.\r\n//    *\r\n//    */\r\n//   messageValueChangedNotOK() {\r\n//     if (this.booleanNameRequired == 0) this.booleanNameRequired = 2;\r\n//     if (this.booleanEmailRequired == 0) this.booleanEmailRequired = 2;\r\n//     if (this.booleanMessageRequired == 0) this.booleanMessageRequired = 2;\r\n//   }\r\n\r\n\r\n//   /**\r\n//    * Sends the mail with the provided name, email, and message values.\r\n//    *\r\n//    * @param {HTMLInputElement} nameField - The name field input element.\r\n//    * @param {HTMLInputElement} emailField - The email field input element.\r\n//    * @param {HTMLInputElement} messageField - The message field input element.\r\n//    *\r\n//    */\r\n//   sendMail(\r\n//     nameField: HTMLInputElement,\r\n//     emailField: HTMLInputElement,\r\n//     messageField: HTMLInputElement\r\n//   ) {\r\n//     let fd = new FormData();\r\n//     fd.append('name', nameField.value);\r\n//     fd.append('email', emailField.value);\r\n//     fd.append('message', messageField.value);\r\n//     this.tryFunction(nameField, emailField, messageField, fd);\r\n//   }\r\n\r\n\r\n//   /**\r\n//    * Tries to send the mail with the provided name, email, message, and form data values.\r\n//    *\r\n//    * @param {any} nameField - The name field element.\r\n//    * @param {any} emailField - The email field element.\r\n//    * @param {any} messageField - The message field element.\r\n//    * @param {any} fd - The form data object.\r\n//    *\r\n//    */\r\n//   async tryFunction(\r\n//     nameField: any,\r\n//     emailField: any,\r\n//     messageField: any,\r\n//     fd: any\r\n//   ) {\r\n//     try {\r\n//       const response = await fetch(\r\n//         'https://sebastian-hass.de/assets/email-send/send_mail.php',\r\n//         {\r\n//           method: 'POST',\r\n//           body: fd,\r\n//         }\r\n//       );\r\n//       if (response.ok) {\r\n//         this.emailSendinOK(nameField, emailField, messageField);\r\n//       } else {\r\n//         this.sendMessage = 'ERROR when sending!';\r\n//       }\r\n//     } catch (error) {\r\n//       this.sendMessage = 'ERROR. Try again later!';\r\n//     }\r\n//   }\r\n  \r\n\r\n//   /**\r\n//    * Performs actions when the email has been successfully sent.\r\n//    *\r\n//    * @param {any} nameField - The name field element.\r\n//    * @param {any} emailField - The email field element.\r\n//    * @param {any} messageField - The message field element.\r\n//    *\r\n//    */\r\n//   emailSendinOK(nameField: any, emailField: any, messageField: any) {\r\n//     this.sendMessage = 'Thanks for message';\r\n//     setTimeout(() => {\r\n//       this.messageChanged = false;\r\n//       this.sendMessage = 'Message sending';\r\n//       nameField.value = '';\r\n//       emailField.value = '';\r\n//       messageField.value = '';\r\n//       this.booleanNameRequired = 0;\r\n//       this.booleanEmailRequired = 0;\r\n//       this.booleanMessageRequired = 0;\r\n//     }, 3000);\r\n//   }\r\n// }\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}